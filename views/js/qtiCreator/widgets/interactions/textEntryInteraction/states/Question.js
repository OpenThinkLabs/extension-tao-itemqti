/**
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; under version 2
 * of the License (non-upgradable).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * Copyright (c) 2013-2016 (original work) Open Assessment Technologies SA ;
 */
define([
    'jquery',
    'i18n',
    'taoQtiItem/qtiCreator/widgets/states/factory',
    'taoQtiItem/qtiCreator/widgets/interactions/states/Question',
    'taoQtiItem/qtiCreator/widgets/helpers/formElement',
    'tpl!taoQtiItem/qtiCreator/tpl/forms/interactions/textEntry'
], function($, __, stateFactory, Question, formElement, formTpl){
    'use strict';

    var regexChar = /\^\[\\s\\S\]\{\d+\,(\d+)\}\$/,
        regexWords =  /\^\(\?\:\(\?\:\[\^\\s\\:\\!\\\?\\\;\\\…\\\€\]\+\)\[\\s\\:\\!\\\?\\;\\\…\\\€\]\*\)\{\d+\,(\d+)\}\$/;
    var patternMaskHelper = {
        parsePattern : function parsePattern(pattern, type){
            if (pattern === undefined || pattern === null){
                return null;
            }
            if (type === "words") {
                //expre = /^(?:(?:[^\s\:\!\?\;\…\€]+)[\s\:\!\?\;\…\€]*){0,3}$/;
                var result = pattern.match(regexWords);

                if (result !== null && result.length > 1) {
                    return result[1];
                }else{
                    return null;
                }
            }else if (type === "chars"){
                // This is the original regExp generated by our code
                // expre = /^[\s\S]{0,10}$/;
                // and we will try to extract the top limit from it with this regexp
                // wich is mostly just escaped version of the first one.
                var result = pattern.match(regexChar);

                if (result !== null && result.length > 1) {
                    return result[1];
                }else{
                    return null;
                }
            }else{
                return null;
            }
        },
        createMaxWordPattern : function createMaxWordPattern(max){
            return '/^(?:(?:[^\\s\\:\\!\\?\\;\\…\\€]+)[\\s\\:\\!\\?\\;\\…\\€]*){0,' + max.toString() + '}$/';
        },
        createMaxCharPattern : function createMaxCharPattern(max){
            return '/^[\\s\\S]{0,' + max.toString() + '}$/';
        }
    };

    var TextEntryInteractionStateQuestion = stateFactory.extend(Question);

    TextEntryInteractionStateQuestion.prototype.initForm = function(){
        
        var _widget = this.widget,
            $form = _widget.$form,
            interaction = _widget.element;

        var patternMask = interaction.attr('patternMask'),
            maxWords = parseInt(patternMaskHelper.parsePattern(patternMask,'words'),10),
            maxChars = parseInt(patternMaskHelper.parsePattern(patternMask,'chars'),10);

        var constraints = {
            none : {label : __("None"), selected : true},
            maxLength : {label : __("Max Length"), selected : false},
            maxWords : {label : __("Max Words"), selected : false},
            pattern : {label : __("Pattern"), selected : false}
        };
        /**
         * Set the selected on the right items before sending it to the view for constraints
         */
        if ( !isNaN(maxWords) && maxWords > 0) {
            constraints.none.selected = false;
            constraints.maxWords.selected = true;
        }else if (!isNaN(maxChars) && maxChars > 0) {
            constraints.none.selected = false;
            constraints.maxLength.selected = true;
        }else if( patternMask !== null && patternMask !== undefined && patternMask !== ""){
            constraints.none.selected = false;
            constraints.pattern.selected = true;
        }

        $form.html(formTpl({
            base : parseInt(interaction.attr('base')),
            placeholderText : interaction.attr('placeholderText'),
            expectedLength : parseInt(interaction.attr('expectedLength')),
            constraints : constraints,
            patternMask : patternMask,
            maxWords : maxWords,
            maxLength : maxChars,
        }));

        formElement.initWidget($form);

        formElement.setChangeCallbacks($form, interaction, {
            base: formElement.getAttributeChangeCallback(),
            placeholderText: formElement.getAttributeChangeCallback(),
            expectedLength: function expectedLength(interaction, attrValue) {
                interaction.attr('expectedLength', isNaN(parseInt(attrValue, 10)) ? 0 : attrValue);
            },
            constraint : function constraint(interaction,attrValue){
                $('[id|="constraint"]').hide('500');
                $('#constraint-' + attrValue).show('1000');
                if (attrValue === "none") {
                    //Reset other pattern definition
                    $('[name="maxWords"]').val('');
                    $('[name="maxLength"]').val('');

                    interaction.attr('patternMask',null);
                }
            },
            patternMask : function patternMask(interaction, attrValue){
                //Reset other pattern definition
                $('[name="maxWords"]').val('');
                $('[name="maxLength"]').val('');

                interaction.attr('patternMask', attrValue);
            },
            maxLength : function maxLength(interaction, attrValue){
                //Reset other pattern definition
                $('[name="maxWords"]').val('');
                $('[name="patternMask"]').val('');

                var newValue = parseInt(attrValue,10);
                if(! isNaN(newValue)){
                    interaction.attr('patternMask', patternMaskHelper.createMaxCharPattern(newValue));
                }
            },
            maxWords : function(interaction, attrValue){
                //Reset other pattern definition
                $('[name="maxLength"]').val('');
                $('[name="patternMask"]').val('');

                var newValue = parseInt(attrValue,10);
                if (! isNaN(newValue)) {
                    interaction.attr('patternMask', patternMaskHelper.createMaxWordPattern(newValue));
                }
            }
        });
    };

    return TextEntryInteractionStateQuestion;
});